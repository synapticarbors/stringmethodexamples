# WEST configuration file
# This is an INI-style file conforming to the Python standard library
# ConfigParser module; though uncommon at the moment, things like %(...)s
# substitution are supported.  More importantly, environment variables are
# substituted wherever a pathname is specified.

[DEFAULT]
# The entries in this section apply to all subsequent sections

# Where to find add-on modules, particularly the module describing the system
# under study.
module_path = $WEST_SIM_ROOT

[drivers]
# What schemes are used to perform various parts of the calculation

# The only operative propagator, currently, is "executable", which delegates
# dynamics to an external executable, usually a shell script wrapping system
# setup and propagation for GROMACS or AMBER (for example).
propagator   = system.SimpleLangevinPropagator

[limits]
# Set limits for maximum number of iterations and maximum wallclock time.
# The maximum number of iterations is per-simulation -- that is, every call
# to w_run will immediately return when that number of iterations is reached.
# The maximum walllock time is per-invocation -- the maximum runtime of a
# single w_run instance.
max_iterations = {max_iterations}
max_wallclock  = 144:00:00

[data]
# Where WEST data is stored.  Currently, the only entry is the rather poorly-
# named "h5file", which is the path to a file which stores simulation progress
# and progress coordinate data in HDF5 format.
h5file = west.h5

[system]
# The system driver describes the *physical* system under study (it has nothing
# to do with OS- or machine-level considerations).  This must be specified as
# module.classname, where the module is on the PYTHONPATH (or is in the
# module_path described under [DEFAULT]).
system_driver = system.System
nbins = {nbins}
target_count = {target_count}

# WEED reweighting
[plugins]
enable       = westext.stringmethod.StringDriver

[stringmethod]
string_method = system.PeriodicLinkedStringMethod
avgpos_method = system.average_position
dfunc_method = system.dfunc
do_update = {sm_do_update}
windowsize = {sm_windowsize}
update_interval = {sm_update_interval}
initial_update = {sm_initial_update}
priority = 1

[simplelangevin]
steps_per_block = {tau}
blocks_per_iteration = 2
ndim = 2
alpha = {alpha}
